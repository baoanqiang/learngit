SVN和git的区别
	Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念。
	git是分布式的，SVN是集中式
	

1. 创建版本库
	初始化一个Git仓库，使用git init命令。
	
	添加文件到Git仓库，分两步：
		第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；
		第二步，使用命令git commit -m '提交说明'，完成。（只提交暂缓区的数据）
		
2.  查看当前的状态，是否有文件是否发生了改变。 命令 ：git status
	查看发生改变的内容。命令 ：git diff 文件名 
	
	要随时掌握工作区的状态，使用git status命令。
	如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
	
	提交修改跟添加文件到git厂库是一样的
	
3.  版本回退
	显示从最近到最远的提交日志。命令 ：git log --pretty=oneline(把版本号和修改历史 显示到一行)
	版本号是通过SHA1计算出来的一串数字，因为git是分布式的，SVN是集中式
	回退到第n个版本 git reset --hard (HEAD-n或者commit_ID)
	commit_ID 不用写完，git会自动去搜索
	
	HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
	穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
	要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
	
4.  工作区和暂存区
	工作去就是我们调用git init命令初始化出来的文件夹。
	暂存区就是git add file1 file2 就是把文件file1 和file2 添加到暂缓区
	可以用git status查看状态转移
	Git是如何跟踪修改(git管理的修改而非文件)的，每次修改，如果不add到暂存区，那就不会加入到commit中。
	
5.	撤销修改
	场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
	场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
	场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
	
6.	删除文件	
	命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。
	
7.	远程厂库
	ssh-keygen -t rsa -C "baoanqiang@qq.com" 创建一个私钥和公钥 github作为远程厂库，在github中配置SSH KEYS
	c/Users/Administrator/.ssh/id_rsa
	
8.	添加远程库
	要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；(git remote add origin https://github.com/baoanqiang/learngit.git) (git remote add origin git@github.com:baoanqiang/learngit.git)
	关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
	此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
	分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，
	而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！
	
9.	从远程库克隆
	要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。( git clone git@github.com:baoanqiang/gitskills.git )
	Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
	
10. 分支管理
	Git鼓励大量使用分支：
	查看分支：git branch
	创建分支：git branch <name>
	切换分支：git checkout <name>
	创建+切换分支：git checkout -b <name>
	合并某分支到当前分支：git merge <name>
	删除分支：git branch -d <name>
	
	有的合并会产生冲突，需要手动修改冲突，然后再提交
	git merge --no-ff -m "merge with no-ff" dev 合并分支dev到主分支上，并提交添上注释（可以看到，不使用Fast forward模式）  
	合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。 
	git log --graph --pretty=oneline --abbrev-commit
	
	Bug分支
	git stash list可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：git stash apply stash@{0}
	修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
	当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
	
	Feature分支
	开发一个新功能最好新建一个分支，到时候再合并 
	如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
	
	多人协作
	查看远程库信息，使用git remote -v；
	本地新建的分支如果不推送到远程，对其他人就是不可见的；
	从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
	在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
	建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
	从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
11.	标签管理
	创建标签
	命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
	git tag -a <tagname> -m "blablabla..."可以指定标签信息；
	git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
	命令git tag可以查看所有标签。git show <tagname> 显示当前标签的详细信息
	
	操作标签
	命令git push origin <tagname>可以推送一个本地标签；
	命令git push origin --tags可以推送全部未推送过的本地标签；
	命令git tag -d <tagname>可以删除一个本地标签；
	命令git push origin :refs/tags/<tagname>可以删除一个远程标签。
	
12.	使用GitHub
	在GitHub上，可以任意Fork开源仓库；
	自己拥有Fork后的仓库的读写权限；
	可以推送pull request给官方仓库来贡献代码。
	
13.	自定义Git
	git config --global color.ui true 让Git显示颜色，会让命令输出看起来更醒目
	
	
	
	
		